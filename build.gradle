import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'maven'
    id 'signing'
}

repositories {
    mavenCentral()
}

group = 'com.ecfeed'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
mainClassName = "com.ecfeed.junit.main.Main"

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.ecfeed.junit.main.Main'
    }
}

dependencies {
    implementation 'org.bouncycastle:bcprov-jdk15on:1.61'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.61'

    implementation 'commons-codec:commons-codec:1.12'

    implementation 'com.google.guava:guava:27.1-jre'

    implementation 'org.glassfish.jersey.core:jersey-client:2.28'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.28'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.4.0'

    implementation 'com.io7m.xom:xom:1.2.10'
    implementation 'dk.brics.automaton:automaton:1.11-8'

    implementation 'org.springframework:spring-core:5.1.5.RELEASE'
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'

    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.5.0'

    
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.4.0'

    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'reference/submodule/ecfeed.core/src']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

javadoc {
    include 'com/ecfeed/junit/annotation/*'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

task jarWithDependencies(type: Jar) {
    archiveClassifier.set("ALL")
    manifest { attributes 'Main-Class': 'com.ecfeed.junit.main.Main' }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } 
    {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

def getBuildTime() {
    return new Date().format('yyyy-MM-dd.HH-mm-ss')
}

def getBuildGitBranch() {
    def value = ['git', 'branch'].execute()
    def result = value.text.split("\n")

    return result.find{ it.contains("* ") }.substring(2)
}

def getBuildGitStatus() {
    def value = ['git', 'diff-index', 'HEAD'].execute()
    def result = value.text.split()

    return result.length > 0 ? 'dirty' : 'clean'
}

def getBuildGitCommit() {
    def value = ['git', 'rev-parse', 'HEAD'].execute()

    return value.text
}

task deleteResources(type: Delete) {
    group = "Custom"
    description = "Remove resource files."

    doFirst {
        delete fileTree(project.projectDir.toString() + '/src/main/resources') {
            include "**/application.properties"
        }
    }

}

task updateResources() {
    group = "Custom"
    description = "Update resource files."

    doFirst {
        copy {
            from(project.projectDir.toString() + '/src/main/templates') {
                include '**/*.properties'
                filter(ReplaceTokens, tokens:
                    [
                        'build.time'  : getBuildTime(),
                        'build.branch': getBuildGitBranch(),
                        'build.commit': getBuildGitCommit(),
                        'build.status': getBuildGitStatus()
                    ]
                )
            }
            into(project.projectDir.toString() + '/src/main/resources')
        }
    }

}

rootProject.tasks.getByName('updateResources').dependsOn deleteResources
rootProject.tasks.getByName('processResources').dependsOn updateResources

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
              authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
               name 'ecFeed'
               packaging 'jar'
               description '' +
                       'An open library used to connect to the ecFeed service. ' +
                       'It can be also used as a standalone testing tool. ' +
                       'It is integrated with Junit5 and generates a stream of test cases using a selected algorithm (e.g. Cartesian, N-Wise). ' +
                       'There are no limitations associated with the off-line version but the user cannot access the on-line computation servers and the model database.'
               url 'https://ecfeed.com/'

               scm {
                   url 'scm:git@github.com:ecfeed/ecfeed.junit.git'
                   connection 'scm:git@github.com:ecfeed/ecfeed.junit.git'
                   developerConnection 'scm:git@github.com:ecfeed/ecfeed.junit.git'
               }

               licenses {
                   license {
                       name 'Eclipse Public License - v 1.0'
                       url 'https://www.eclipse.org/legal/epl-v10.html'
                   }
               }

               developers {
                   developer {
                       id 'p.chamuczynski'
                       name 'Patryk Chamuczynski'
                   }
                   developer {
                       id 'marek'
                       name 'Marek Kuczabinski'
                   }
                   developer {
                       id 'k.skorupski'
                       name 'Krzysztof Skorupski'
                   }
                   developer {
                       id 'p.uznanski'
                       name 'Przemyslaw Uznanski'
                   }
               }

           }
        }
    }
}
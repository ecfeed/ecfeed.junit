import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'java-library'
    id 'application'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '1.0.0'

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.ecfeed.junit.main.Main'
    }
}

mainClassName = "com.ecfeed.junit.main.Main"

dependencies {
    implementation 'org.bouncycastle:bcprov-jdk15on:1.61'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.61'

    implementation 'commons-codec:commons-codec:1.12'

    implementation 'com.google.guava:guava:27.1-jre'

    implementation 'org.glassfish.jersey.core:jersey-client:2.28'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.28'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.4.0'

    implementation 'com.io7m.xom:xom:1.2.10'
    implementation 'dk.brics.automaton:automaton:1.11-8'

    implementation 'org.springframework:spring-core:5.1.5.RELEASE'
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'

// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.5.0'

    
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.4.0'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'reference/submodule/ecfeed.core/src']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

task jarWithDependencies(type: Jar) {
    classifier = 'ALL'
    manifest { attributes 'Main-Class': 'com.ecfeed.junit.main.Main' }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } 
    {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

def getBuildTime() {
    return new Date().format('yyyy-MM-dd.HH-mm-ss')
}

def getBuildGitBranch() {
    def value = ['git', 'branch'].execute()
    def result = value.text.split("\n")

    return result.find{ it.contains("* ") }.substring(2)
}

def getBuildGitStatus() {
    def value = ['git', 'diff-index', 'HEAD'].execute()
    def result = value.text.split()

    return result.length > 0 ? 'dirty' : 'clean'
}

def getBuildGitCommit() {
    def value = ['git', 'rev-parse', 'HEAD'].execute()

    return value.text
}

task deleteResources(type: Delete) {
    group = "Custom"
    description= "Remove resource files."

    doFirst {
        delete fileTree(project.projectDir.toString() + '/src/main/resources') {
            include "**/*.properties"
        }
    }

}

task updateResources() {
    group = "Custom"
    description = "Update resource files."

    doFirst {
        copy {
            from(project.projectDir.toString() + '/src/main/templates') {
                include '**/*.properties'
                filter(ReplaceTokens, tokens:
                    [
                        'build.time'  : getBuildTime(),
                        'build.branch': getBuildGitBranch(),
                        'build.commit': getBuildGitCommit(),
                        'build.status' : getBuildGitStatus()
                    ]
                )
            }
            into(project.projectDir.toString() + '/src/main/resources')
        }
    }

}

rootProject.tasks.getByName('updateResources').dependsOn deleteResources
rootProject.tasks.getByName('processResources').dependsOn updateResources